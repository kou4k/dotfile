inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
" inoremap <expr> <cr>    pumvisible() ? "\<C-y>" : "\<cr>"

" vim-lsp servers
" https://github.com/prabirshrestha/vim-lsp.wiki.git

if empty(globpath(&rtp, 'autoload/lsp.vim'))
  finish
endif

function! s:on_lsp_buffer_enabled() abort
  setlocal omnifunc=lsp#complete
  setlocal signcolumn=yes
  if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
  nmap <buffer> gd <plug>(lsp-definition)
  nmap <buffer> gr <plug>(lsp-references)
  nmap <buffer> gi <plug>(lsp-implementation)
  nmap <buffer> gt <plug>(lsp-type-definition)
  nmap <buffer> <leader>rn <plug>(lsp-rename)
  nmap <buffer> [g <Plug>(lsp-previous-diagnostic)
  nmap <buffer> ]g <Plug>(lsp-next-diagnostic)
  nmap <buffer> K <plug>(lsp-hover)
  inoremap <expr> <cr> pumvisible() ? "\<c-y>\<cr>" : "\<cr>"
endfunction

augroup lsp_install
  au!
  autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END
command! LspDebug let lsp_log_verbose=1 | let lsp_log_file = expand('~/lsp.log') | let asyncomplete_log_file = expand('~/asyncomplete.log')

let g:lsp_diagnostics_enabled = 1
let g:lsp_diagnostics_echo_cursor = 1
let g:asyncomplete_auto_popup = 1
let g:asyncomplete_auto_completeopt = 0
let g:asyncomplete_popup_delay = 200
let g:lsp_text_edit_enabled = 1

"" " pip install python-language-server
"" if executable('pyls')
""     au User lsp_setup call lsp#register_server({
""         \ 'name': 'pyls',
""         \ 'cmd': {server_info->['pyls']},
""         \ 'whitelist': ['python'],
""         \ })
"" endif
""
"" " gem install solargraph
"" if executable('solargraph')
""     " gem install solargraph
""     au User lsp_setup call lsp#register_server({
""         \ 'name': 'solargraph',
""         \ 'cmd': {server_info->[&shell, &shellcmdflag, 'solargraph stdio']},
""         \ 'initialization_options': {"diagnostics": "true"},
""         \ 'whitelist': ['ruby'],
""         \ })
"" endif
""
"" " npm install -g typescript typescript-language-server
"" if executable('typescript-language-server')
""     au User lsp_setup call lsp#register_server({
""       \ 'name': 'javascript support using typescript-language-server',
""       \ 'cmd': { server_info->[&shell, &shellcmdflag, 'typescript-language-server --stdio']},
""       \ 'root_uri': { server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_directory(lsp#utils#get_buffer_path(), '.git/..'))},
""       \ 'whitelist': ['javascript', 'javascript.jsx', 'javascriptreact']
""       \ })
"" endif
""
"" " npm install -g dockerfile-language-server-nodejs
"" if executable('docker-langserver')
""     au User lsp_setup call lsp#register_server({
""         \ 'name': 'docker-langserver',
""         \ 'cmd': {server_info->[&shell, &shellcmdflag, 'docker-langserver --stdio']},
""         \ 'whitelist': ['dockerfile'],
""         \ })
"" endif
""
"" " npm install --g vscode-html-languageserver-bin
"" if executable('html-languageserver')
""   au User lsp_setup call lsp#register_server({
""     \ 'name': 'html-languageserver',
""     \ 'cmd': {server_info->[&shell, &shellcmdflag, 'html-languageserver --stdio']},
""     \ 'whitelist': ['html'],
""   \ })
"" endif
""
"" " npm i -g bash-language-server
"" if executable('bash-language-server')
""   au User lsp_setup call lsp#register_server({
""         \ 'name': 'bash-language-server',
""         \ 'cmd': {server_info->[&shell, &shellcmdflag, 'bash-language-server start']},
""         \ 'whitelist': ['sh'],
""         \ })
"" endif
