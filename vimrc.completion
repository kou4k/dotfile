set wildmenu               " コマンド補完を強化
set wildchar=<tab>         " コマンド補完を開始するキー
set wildmode=list:full     " リスト表示，最長マッチ
set history=1000           " コマンド・検索パターンの履歴数
set complete+=k            " 補完に辞書ファイル追加

cnoremap <C-p> <Up>
cnoremap <Up>  <C-p>
cnoremap <C-n> <Down>
cnoremap <Down>  <C-n>

if !has('nvim')
  " Disable AutoComplPop.
  let g:acp_enableAtStartup = 0
  " Use neocomplete.
  let g:neocomplete#enable_at_startup = 1
  " Use smartcase.
  let g:neocomplete#enable_smart_case = 1
  " Use camel case completion.
  let g:neocomplete#enable_camel_case_completion = 1
  " Use underbar completion.
  let g:neocomplete#enable_underbar_completion = 1
  " Set minimum syntax keyword length.
  let g:neocomplete#sources#syntax#min_keyword_length = 3
  let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'
  " 補完候補の一番先頭を選択状態にする(AutoComplPopと似た動作)
  let g:neocomplete#enable_auto_select = 1
  "ポップアップメニューで表示される候補の数。初期値は100
  let g:neocomplete#max_list = 20

  " Define dictionary.
  let g:neocomplete#sources#dictionary#dictionaries = {
      \ 'default' : '',
      \ 'vimshell' : $HOME.'/.vimshell_hist',
      \ 'scheme' : $HOME.'/.gosh_completions',
      \ 'cs' : $HOME.'/.vim/dict/unity.dict'
          \ }

  " Define keyword.
  if !exists('g:neocomplete_keyword_patterns')
      let g:neocomplete#keyword_patterns = {}
  endif
  let g:neocomplete#keyword_patterns['default'] = '\h\w*'

  " Plugin key-mappings.
  inoremap <expr><C-g>     neocomplete#undo_completion()
  inoremap <expr><C-l>     neocomplete#complete_common_string()

  " Recommended key-mappings.
  " <CR>: close popup and save indent.
  inoremap <expr><C-CR>  pumvisible() ? "\<C-y>" : "\<C-CR>"

  " <TAB>: completion.
  inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
  " <C-h>, <BS>: close popup and delete backword char.
  inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
  inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
  inoremap <expr><C-y>  neocomplete#close_popup()
  inoremap <expr><C-e>  neocomplete#cancel_popup()

  " For cursor moving in insert mode(Not recommended)
  "inoremap <expr><Left>  neocomplete#close_popup() . "\<Left>"
  "inoremap <expr><Right> neocomplete#close_popup() . "\<Right>"
  "inoremap <expr><Up>    neocomplete#close_popup() . "\<Up>"
  "inoremap <expr><Down>  neocomplete#close_popup() . "\<Down>"
  " Or set this.
  "let g:neocomplete#enable_cursor_hold_i = 1

  " AutoComplPop like behavior.
  "let g:neocomplete#enable_auto_select = 1

  " Shell like behavior(not recommended).
  "set completeopt+=longest
  "let g:neocomplete#enable_auto_select = 1
  "let g:neocomplete#disable_auto_complete = 1
  "inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"
  "inoremap <expr><CR>  neocomplete#smart_close_popup() . "\<CR>"

  " Enable omni completion.
  autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
  autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
  autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
  autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
  " autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
  autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete
  autocmd FileType cs setlocal omnifunc=OmniSharp#Complete

  " Enable heavy omni completion.
  if !exists('g:neocomplete#sources#omni#input_patterns')
    let g:neocomplete#sources#omni#input_patterns = {}
  endif

  " let g:neocomplete#sources#omni#input_patterns.ruby = '[^. *\t]\.\h\w*\|\h\w*::'
  let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
  let g:neocomplete#sources#omni#input_patterns.c = '\%(\.\|->\)\h\w*'
  let g:neocomplete#sources#omni#input_patterns.cpp = '\h\w*\%(\.\|->\)\h\w*\|\h\w*::'
  let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'
  let g:neocomplete#sources#omni#input_patterns.cs = '[^.]\.\%(\u\{2,}\)\?'
  let g:neocomplete#sources#omni#input_patterns.python = '\h\w*\|[^. \t]\.\w*'
endif


if has('nvim')
  " Use deoplete.
  let g:deoplete#enable_at_startup = 1
  let g:deoplete#auto_complete_delay = 0
  " Disable AutoComplPop.
  "" let g:acp_enableAtStartup = 0
  " Use smartcase.
  let g:deoplete#enable_smart_case = 1
  " Use camel case completion.
  let g:deoplete#enable_camel_case = 1
  " Use underbar completion.
  let g:deoplete#enable_underbar_completion = 1
  " Set minimum syntax keyword length.
  let g:deoplete#sources#syntax#min_keyword_length = 3
  let g:deoplete#lock_buffer_name_pattern = '\*ku\*'
  " 補完候補の一番先頭を選択状態にする(AutoComplPopと似た動作)
  let g:deoplete#enable_auto_select = 1
  "ポップアップメニューで表示される候補の数。初期値は100
  let g:deoplete#max_list = 20

  " Define dictionary.
  let g:deoplete#sources#dictionary#dictionaries = {
      \ 'default' : '',
      \ 'vimshell' : $HOME.'/.vimshell_hist',
      \ 'scheme' : $HOME.'/.gosh_completions',
      \ 'cs' : $HOME.'/.vim/dict/unity.dict'
          \ }

  " Define keyword.
  if !exists('g:deoplete_keyword_patterns')
      let g:deoplete#keyword_patterns = {}
  endif
  let g:deoplete#keyword_patterns['default'] = '\h\w*'

  " Plugin key-mappings.
  inoremap <expr><C-g>     deoplete#undo_completion()
  inoremap <expr><C-l>     deoplete#complete_common_string()
  "
  " Recommended key-mappings.
  " <CR>: close popup and save indent.
  inoremap <expr><C-CR>  pumvisible() ? "\<C-y>" : "\<C-CR>"

  " <TAB>: completion.
  inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
  " <C-h>, <BS>: close popup and delete backword char.
  inoremap <expr><C-h> deoplete#smart_close_popup()."\<C-h>"
  inoremap <expr><BS> deoplete#smart_close_popup()."\<C-h>"
  inoremap <expr><C-y>  deoplete#close_popup()
  inoremap <expr><C-e>  deoplete#cancel_popup()
  ""
  "" " For cursor moving in insert mode(Not recommended)
  "" "inoremap <expr><Left>  deoplete#close_popup() . "\<Left>"
  "" "inoremap <expr><Right> deoplete#close_popup() . "\<Right>"
  "" "inoremap <expr><Up>    deoplete#close_popup() . "\<Up>"
  "" "inoremap <expr><Down>  deoplete#close_popup() . "\<Down>"
  "" " Or set this.
  "" "let g:deoplete#enable_cursor_hold_i = 1
  ""
  "" " AutoComplPop like behavior.
  "" "let g:deoplete#enable_auto_select = 1
  ""
  "" " Shell like behavior(not recommended).
  "" "set completeopt+=longest
  "" "let g:deoplete#enable_auto_select = 1
  "" "let g:deoplete#disable_auto_complete = 1
  "" "inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"
  "" "inoremap <expr><CR>  deoplete#smart_close_popup() . "\<CR>"
  ""
  "" " Enable omni completion.
  autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
  autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
  autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
  autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
  " autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
  autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete
  autocmd FileType cs setlocal omnifunc=OmniSharp#Complete
  ""
  "" " Enable heavy omni completion.
  if !exists('g:deoplete#sources#omni#input_patterns')
     let g:deoplete#sources#omni#input_patterns = {}
  endif
  ""
  "" " let g:deoplete#sources#omni#input_patterns.ruby = '[^. *\t]\.\h\w*\|\h\w*::'
  "" let g:deoplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
  "" let g:deoplete#sources#omni#input_patterns.c = '\%(\.\|->\)\h\w*'
  "" let g:deoplete#sources#omni#input_patterns.cpp = '\h\w*\%(\.\|->\)\h\w*\|\h\w*::'
  "" let g:deoplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'
  "" let g:deoplete#sources#omni#input_patterns.cs = '[^.]\.\%(\u\{2,}\)\?'
  "" let g:deoplete#sources#omni#input_patterns.python = '\h\w*\|[^. \t]\.\w*'
endif
